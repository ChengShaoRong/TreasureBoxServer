//It's automatic generate by Account.ridl, DON'T modify this file.
//You should modify 'Account.cs' or 'Account.ridl'.
using System;
using System.Collections.Generic;
using UnityEngine;

namespace CSharpLike
{
	public class Account_Base
	{
		public int uid;
		public int acctType;
		public DateTime createTime;
		public string name;
		public string password;
		public string nickname;
		public int money;
		public int score;
		public DateTime scoreTime;
		public DateTime lastLoginTime;
		public static Account ToAccount(JSONData jsonData)
		{
			return (Account)KissJson.ToObject(typeof(Account), jsonData);
		}
		public static List<Account> ToAccounts(JSONData jsonData)
		{
			List<object> objs = KissJson.ToObjects(typeof(Account), jsonData);
			List<Account> accounts = new List<Account>();
			foreach (object obj in objs)
				accounts.Add((Account)obj);
			return accounts;
		}

		public override string ToString()
		{
			return KissJson.ToJSONData(this).ToJson();
		}
		public void Clear()
		{
			KissJson.ClearCache(_uid_);
		}
		string _uid_ = "";
		ulong _sendMask_ = 0;
		public virtual void OnCallbackObjectItems(List<Item> data){}
		public virtual void OnCallbackDeleteItems(List<Item> data){}
		public virtual void OnCallbackObjectMails(List<Mail> data){}
		public virtual void OnCallbackDeleteMails(List<Mail> data){}
		public virtual void OnCallbackObjectSignIn(){}
		public virtual void OnCallbackDeleteSignIn(){}
		public void OnCB_Object(JSONData jsonData)
		{
			string name = jsonData["name"];
			switch (name)
			{
				case "account":
					ToAccount(jsonData["obj"]);
					NotifyValuesChanged();
					break;
				case "items":
					{
						List<Item> _items_ = Item.ToItems(jsonData["obj"]);
						foreach(Item _one_ in _items_)
						{
							items[_one_.itemId] = _one_;
							_one_.NotifyValuesChanged();
						}
						OnCallbackObjectItems(_items_);
					}
					break;
				case "mails":
					{
						List<Mail> _mails_ = Mail.ToMails(jsonData["obj"]);
						foreach(Mail _one_ in _mails_)
						{
							mails[_one_.uid] = _one_;
						}
						OnCallbackObjectMails(_mails_);
					}
					break;
				case "signIn":
					signIn = SignIn.ToSignIn(jsonData["obj"]);
					OnCallbackObjectSignIn();
					break;
				default:
					Debug.LogError("CB_Object unsupported name " + name);
					break;
			}
		}
		public void OnCB_Delete(JSONData jsonData)
		{
			string name = jsonData["name"];
			List<int> ids = jsonData["ids"];
			switch (name)
			{
				case "account":
					OnDeleted();
					break;
				case "items":
					{
						List<Item> _deletes_ = new List<Item>();
						foreach(int _itemId_ in ids)
						{
							Item _one_ = GetItem(_itemId_);
							if (_one_ != null)
							{
								_deletes_.Add(_one_);
								_one_.Clear();
								items.Remove(_itemId_);
								_one_.OnDeleted();
							}
						}
						OnCallbackDeleteItems(_deletes_);
					}
					break;
				case "mails":
					{
						List<Mail> _deletes_ = new List<Mail>();
						foreach(int _uid_ in ids)
						{
							Mail _one_ = GetMail(_uid_);
							if (_one_ != null)
							{
								_deletes_.Add(_one_);
								_one_.Clear();
								mails.Remove(_uid_);
							}
						}
						OnCallbackDeleteMails(_deletes_);
					}
					break;
				case "signIn":
					signIn.Clear();
					OnCallbackDeleteSignIn();
					signIn = null;
					break;
				default:
					Debug.LogError("CB_Delete unsupported name " + name);
					break;
			}
		}
		[KissJsonDontSerialize]
		public Dictionary<int, Item> items = new Dictionary<int, Item>();
		public void SetItems(List<Item> items)
		{
			foreach(Item one in items)
				this.items[one.itemId] = one;
		}
		public Item GetItem(int itemId)
		{
			if (items.ContainsKey(itemId))
				return items[itemId];
			return null;
		}
		public bool RemoveItem(int itemId)
		{
			return items.Remove(itemId);
		}
		[KissJsonDontSerialize]
		public Dictionary<int, Mail> mails = new Dictionary<int, Mail>();
		public void SetMails(List<Mail> mails)
		{
			foreach(Mail one in mails)
				this.mails[one.uid] = one;
		}
		public Mail GetMail(int uid)
		{
			if (mails.ContainsKey(uid))
				return mails[uid];
			return null;
		}
		public bool RemoveMail(int uid)
		{
			return mails.Remove(uid);
		}
		[KissJsonDontSerialize]
		public SignIn signIn = null;
		public virtual void OnChanged() {}
		public virtual void OnBaseInfoChanged(){}
		public virtual void OnLoginInfoChanged(){}
		public virtual void OnNicknameChanged(){}
		public virtual void OnMoneyChanged(){}
		public virtual void OnScoreChanged(){}
		public virtual void OnLastLoginTimeChanged(){}
		public virtual void OnDeleted(){}
		public void NotifyValuesChanged()
		{
			if ((_sendMask_ & 1) > 0) OnBaseInfoChanged();
			if ((_sendMask_ & 2) > 0) OnLoginInfoChanged();
			if ((_sendMask_ & 4) > 0) OnNicknameChanged();
			if ((_sendMask_ & 8) > 0) OnMoneyChanged();
			if ((_sendMask_ & 16) > 0) OnScoreChanged();
			if ((_sendMask_ & 32) > 0) OnLastLoginTimeChanged();
			if (_sendMask_ > 0) OnChanged();
		}
	}
}
